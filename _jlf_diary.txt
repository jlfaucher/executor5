ooRexx5 has too many changes, compared to ooRexx4.
Not possible to merge the changes for ooRexx5 into the Github repository Executor.
Hence the creation of a new Github repository Executor5...


===============================================================================
2021 aug 10

Concurrency trace backported from Executor.
The interpreter has been modified to add thread id, activation id, variable's dictionnary id,
lock counter and lock flag in the lines printed by trace.
Concurrency trace is displayed only when env variable RXTRACE_CONCURRENCY=ON

Informations that are displayed.
RexxActivity::traceOutput(RexxActivation *activation, ...
T1       SysCurrentThreadId(),
A2       (unsigned int)activation,
V1       (activation) ? activation->getVariableDictionary() : NULL      // settings.object_variables
1        (activation) ? activation->getReserveCount() : 0               // settings.object_variables->getReserveCount()
*        (activation && activation->isObjectScopeLocked()) ? '*' : ' ') // object_scope == SCOPE_RESERVED

-- Raw output, not easy to read

RXTRACE_CONCURRENCY=ON rexx concurrency_trace.rex
0000000092c58380 000000000466de00 0000000000000000 00000       1 *-* .demo~new~exec(1)
0000000092c58380 000000000466de00 0000000000000000 00000         >E>   .DEMO => "The DEMO class"
0000000092c58380 000000000466de00 0000000000000000 00000         >M>   "NEW" => "a DEMO"
0000000092c58380 000000000466de00 0000000000000000 00000         >L>   "1"
0000000092c58380 000000000466de00 0000000000000000 00000         >A>   "1"
0000000092c58380 0000000004679750 0000000004679980 00000         >I> Method "EXEC" with scope "DEMO" in package "/local/rexx/oorexx/executor/sandbox/jlf/demos/concurrency_trace.rex".
0000000092c58380 0000000004679750 0000000004679980 00001*      8 *-* use arg id
0000000092c58380 0000000004679750 0000000004679980 00001*        >>>   "1"
0000000092c58380 0000000004679750 0000000004679980 00001*        >=>   ID <= "1"
0000000092c58380 0000000004679750 0000000004679980 00001*      9 *-* reply
0000000092c58380 000000000466de00 0000000000000000 00000       2 *-* .demo~new~exec(2)
0000000092c58380 000000000466de00 0000000000000000 00000         >E>   .DEMO => "The DEMO class"
0000000092c58380 000000000466de00 0000000000000000 00000         >M>   "NEW" => "a DEMO"
0000000092c58380 000000000466de00 0000000000000000 00000         >L>   "2"
0000000092c58380 000000000466de00 0000000000000000 00000         >A>   "2"
0000000092c58380 0000000004681590 00000000046817c0 00000         >I> Method "EXEC" with scope "DEMO" in package "/local/rexx/oorexx/executor/sandbox/jlf/demos/concurrency_trace.rex".
0000000092c58380 0000000004681590 00000000046817c0 00001*      8 *-* use arg id
0000000092c58380 0000000004681590 00000000046817c0 00001*        >>>   "2"
0000000092c58380 0000000004681590 00000000046817c0 00001*        >=>   ID <= "2"
0000000092c58380 0000000004681590 00000000046817c0 00001*      9 *-* reply
000000000240c000 0000000004679750 0000000004679980 00001*        >I> Method "EXEC" with scope "DEMO" in package "/local/rexx/oorexx/executor/sandbox/jlf/demos/concurrency_trace.rex".
000000000240c000 0000000004679750 0000000004679980 00001*     10 *-* do 2
etc...

-- Human-readable output, generated by piping the output through tracer.rex

RXTRACE_CONCURRENCY=ON rexx concurrency_trace.rex 2>&1 | rexx trace/tracer.rex
T1   A1                     1 *-* .demo~new~exec(1)
T1   A1                       >E>   .DEMO => "The DEMO class"
T1   A1                       >M>   "NEW" => "a DEMO"
T1   A1                       >L>   "1"
T1   A1                       >A>   "1"
T1   A2     V1                >I> Method "EXEC" with scope "DEMO" in package "/local/rexx/oorexx/executor/sandbox/jlf/demos/concurrency_trace.rex".
T1   A2     V1      1*      8 *-* use arg id
T1   A2     V1      1*        >>>   "1"
T1   A2     V1      1*        >=>   ID <= "1"
T1   A2     V1      1*      9 *-* reply
T1   A1                     2 *-* .demo~new~exec(2)
T1   A1                       >E>   .DEMO => "The DEMO class"
T1   A1                       >M>   "NEW" => "a DEMO"
T1   A1                       >L>   "2"
T1   A1                       >A>   "2"
T1   A3     V2                >I> Method "EXEC" with scope "DEMO" in package "/local/rexx/oorexx/executor/sandbox/jlf/demos/concurrency_trace.rex".
T1   A3     V2      1*      8 *-* use arg id
T1   A3     V2      1*        >>>   "2"
T1   A3     V2      1*        >=>   ID <= "2"
T1   A3     V2      1*      9 *-* reply
T2   A2     V1      1*        >I> Method "EXEC" with scope "DEMO" in package "/local/rexx/oorexx/executor/sandbox/jlf/demos/concurrency_trace.rex".
T2   A2     V1      1*     10 *-* do 2
etc...


Program used for testing the concurrency trace:
https://github.com/jlfaucher/executor/blob/master/sandbox/jlf/demos/concurrency_trace.rex

Script tracer.rex:
https://github.com/jlfaucher/executor/blob/master/sandbox/jlf/samples/trace/tracer.rex


===============================================================================
2021 aug 09

6 years have passed...
A Mail from Rony gave me the idea to apply the changes for the concurrency trace.
First, an update of this repository to the latest SVN version.


===============================================================================
2015 aug 09

Review the warnings raised by AppleClang 6.1.0

main/trunk/interpreter/classes/NumberStringMath.cpp:374:14: warning: comparison of array
      'this->numberDigits' equal to a null pointer is always false [-Wtautological-pointer-compare]
    else if (numberDigits == 0 && digitsCount == 1)
             ^~~~~~~~~~~~    ~
-->
replace by numberDigits[0] == '\0'


main/trunk/interpreter/parser/LanguageParser.cpp:3547:23: warning: case value not in enumerated type
      'TokenClass' [-Wswitch]
                 case OPERATOR_BACKSLASH:
                      ^
-->
        case  TOKEN_OPERATOR:
        {
replace      switch (token->type())
by           switch (token->subtype())


main/trunk/interpreter/platform/unix/TimeSupport.cpp:167:1: warning: control reaches end of non-void
-->
add return 0;


main/trunk/testbinaries/orxexits.hpp:37:9: warning: 'orxexits_included' is used as a header guard
      here, followed by #define of a different macro [-Wheader-guard]
-->
replace #define orsexits_included
by      #define orxexits_included

===============================================================================
2015 aug 08

Continue working on the build error "sized deallocation..."
A possible solution is to add a parameter to the operator new function of the class NumberArray:
    void *operator new(size_t base, size_t entries, bool placement=true);
Another solution is to add this declaration to the class NumberArray:
    inline void  operator delete(void *) {;}
--> I choose the second solution because this is what's already in place for other classes.


Other build errors...

main\trunk\interpreter\api\InterpreterAPI.cpp(245):
error C3688: invalid literal suffix 'OOREXX_COPY_YEAR'; literal operator or literal operator template 'operator ""OOREXX_COPY_YEAR' not found
--> fixed by adding spaces before & after OOREXX_COPY_YEAR.

main\trunk\interpreter\platform\windows\SysInterpreterInstance.cpp(117):
error C2039: '_file': is not a member of '_iobuf'
--> fixed by replacing
    if ((stdin->_file == -1)
by
    if ((_fileno(stdin) < 0)

C:\Program Files (x86)\Windows Kits\10\include\10.0.10150.0\ucrt\stdio.h(1927):
fatal error C1189: #error:  Macro definition of snprintf conflicts with Standard Library function declaration
main\trunk\extensions\platform\windows\oodialog\APICommon.hpp(44):
note: see previous definition of 'snprintf'
--> fixed by no longer defining snprintf
#if _MSC_VER < 1900
    #define snprintf _snprintf
#endif


Now build 100% with Visual Studio 2015 Community.


===============================================================================
2015 aug 02

Building with Visual Studio 2015 Community (cl 19.00.23026).

ClientMessage.cpp
C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\INCLUDE\stdint.h(17):
error C2371: 'int8_t': redefinition; different basic types
main\trunk\api\platform\windows\rexxapitypes.h(70): note: see declaration of 'int8_t'
...
and several others.
--> fixed by modifying CMakeLists.txt to have these checks under WIN32 too :
check_include_file(inttypes.h HAVE_INTTYPES_H)
check_include_file(stdint.h HAVE_STDINT_H)
and then including config.h in api\platform\windows\rexxapitypes.h
and testing HAVE_INTTYPES_H to let include inttypes.h (from Windows Kits\10) which includes stdint.h


main\trunk\interpreter\classes\ArrayClass.cpp(123):
error C2956: sized deallocation function 'operator delete(void*, size_t)' would be chosen as placement deallocation function.
predefined C++ types (compiler internal)(30): note: see declaration of 'operator delete'
https://llvm.org/bugs/show_bug.cgi?id=23513
https://connect.microsoft.com/VisualStudio/feedback/details/1351894
--> Current build error not yet fixed.


===============================================================================
2014 nov 11

Creation of the Github repository Executor5.
Procedure :
Using SmartGit, clone svn://svn.code.sf.net/p/oorexx/code-0/main (svn)
Add the remote git@github.com:jlfaucher/executor5.git (origin)
Push svn to origin

Remember, don't use
svn+ssh://jfaucher@svn.code.sf.net/p/oorexx/code-0/main
to avoid any accidental update of SVN repository.


2015 apr 26
Attempt to reclone because the history of revisions has a "hole" before rev 10464 "promote sandbox version to trunk".
But... see below, does not work.
Not a big problem, I can stay like that.
I keep the procedure, for the records.

Follow the procedure described here :
https://www.syntevo.com/smartgit/howtos/5/show?page=config.svn-clone-custom-branch-layout
because ooRexx SVN repository has not a standard branch layout.
Repository, Clone.
Check the box "Just initialize clone".
Click finish.
-->  The repository is in state <incomplete>
Close the repository.
Edit the file .git/svn/.svngit/svngitkit.config
Replace the section [svn-git-remote "svn"] by :
[svn-git-remote "svn"]
	url = svn://svn.code.sf.net/p/oorexx/code-0/main/trunk
	fetch = trunk:refs/remotes/svn/trunk
    branches = branches/*:refs/remotes/svn/branches/*
    tags = releases/*:refs/remotes/svn/releases/*
    additional-branches = "sandbox/rick/*:refs/remotes/sandbox/rick/*"
[svn-git-remote "svn"]
	url = svn://svn.code.sf.net/p/oorexx/code-0/main
	fetch = trunk:refs/remotes/svn/trunk
	branches = branches/*:refs/remotes/svn/branches/*
	tags = releases/*:refs/remotes/svn/releases/*
Reopen the repository in SmartGit.
Remote, Pull, Fetch only (rebase).
--> Display "Fetch".
When done, the repository is still in state <incomplete>.
Again : Remote, pull
--> Display "Restarting clone", and work in background (you see the progression in the bottom bar).
and... BOOM !
Repository is inconsistent (remote reference "refs/remotes/svn/branches/4.1 corresponds to SVN
remote "svn", but has no fetched SVN commit).
Please reclone the repository from scratch.

===============================================================================
History of merges.

rev 12286
rev 12283
rev 11510
rev 11410
rev 11306
rev 11184
rev 11110
rev 11051
rev 10999
rev 10958
rev 10950
rev 10924
rev 10916
rev 10897
rev 10881
rev 10880
rev 10839
rev 10835
rev 10688

Remember, to merge the last changes from SVN:
pull from SVN
open log
select most recent commit from SVN
Right clic: merge...
Select create merge commit (Merge remote-tracking branch 'svn/trunk')
Manage the conflicts, if any.
When all the conflict have been fixed, the status is still "merging-state". Will be reset by a commit.
Update the section History of merges in this file.
Commit the changes with message "Merged from branch 'trunk' svn rev <REV>"
push to Github: in log file, select most recent commit, right clic & choose push...
select the right repository : gihub
