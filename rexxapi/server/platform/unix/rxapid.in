#!/bin/sh
#
# Start/stop rexx api daemon, based on OpenSUSE's "/etc/init.d/skeleton"
#
# Author: Perry Werneck <perry.werneck@gmail.com> 2012
#
# /etc/init.d/rxapid
#
### BEGIN INIT INFO
# Provides:          rxapi
# Required-Start:    $syslog $remote_fs 
# Should-Start:      $time
# Required-Stop:     $syslog $remote_fs
# Should-Stop:       
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: Start and stop rxapi daemon
# Description:       Srxapid provides the communication service for between all running ooRexx scripts
### END INIT INFO
# 

# Check for missing binaries (stale symlinks should not happen)
# Note: Special treatment of stop for LSB conformance
RXAPI_BIN=@prefix@/bin/rxapi
test -x $RXAPI_BIN || { echo "$RXAPI_BIN not installed"; 
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi; }

# Source LSB init functions
# providing start_daemon, killproc, pidofproc, 
# log_success_msg, log_failure_msg and log_warning_msg.
# This is currently not used by UnitedLinux based distributions and
# not needed for init scripts for UnitedLinux only. If it is used,
# the functions from rc.status should not be sourced or used.
#. /lib/lsb/init-functions

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     be verbose in local rc status and clear it afterwards
#      rc_status -v -r  ditto and clear both the local and overall rc status
#      rc_status -s     display "skipped" and exit with status 3
#      rc_status -u     display "unused" and exit with status 3
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear both the local and overall rc status
#      rc_exit          exit appropriate to overall rc status
#      rc_active        checks whether a service is activated by symlinks
. /etc/rc.status

# Reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0	  - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

#---[ binfmt calls ]--------------------------------------------------------------------------------

BINFMT_NAME=ooRexx
BINFMT_MISC=/proc/sys/fs/binfmt_misc
BINFMT_MAGIC="/**/@REXX"
BINFMT_MAGIC_HEX="2f2A2a2f4052455858"
BINFMT_INTERP=@prefix@/bin/rexx
BINFMT_TYPE=M
BINFMT_OFFSET=
BINFMT_MASK=

binfmt_check_file() {
	file="$1"

	if [ $(grep -ci "magic ${BINFMT_MAGIC_HEX}" ${file}) != 0 ]; then
		if [ $(grep -ci "enabled" ${file}) != 0 ]; then
			return 153
		fi
		return 151
	fi

	return 155
}

binfmt_mount() {

	if [ ! -e ${BINFMT_MISC}/register ] || [ ! -e ${BINFMT_MISC}/status ]; then
		mkdir -p ${BINFMT_MISC} 2> /dev/null

		if [ -d ${BINFMT_MISC} ]; then
			mount -t binfmt_misc none ${BINFMT_MISC} 2> /dev/null
		else
			return 4
		fi
	fi

	if [ -e ${BINFMT_MISC}/register ] && [ -e ${BINFMT_MISC}/status ]; then
		return 0
	fi

	return 5
}

binfmt_register() {

    	# first make sure that nothing else has registered the ooRexx magic
	for file in ${BINFMT_MISC}/*; do
		filename="`basename ${file}`"
		if [ "${filename}" != "register" ] && [ "${filename}" != "status" ]; then

			binfmt_check_file ${file}
			is_registered=$?

			if [ ${is_registered} -eq 153 ] && [ "${filename}" != "${BINFMT_NAME}" ]; then
				logger -t "${BINFMT_NAME}" "Magic is already registered on ${filename}"
				return 156
			elif [ ${is_registered} -eq 154 ] && [ "${filename}" = "${BINFMT_NAME}" ]; then
				# the registration exists, but is disabled, so re-enable it
				logger -t "${BINFMT_NAME}" "Magic is already registered on ${filename} but its disabled, re-enabling it"
				echo 1 > ${BINFMT_MISC}/${BINFMT_NAME} 2> /dev/null
				if [ $? -ne 0 ]; then
					return 4
				fi
			fi
		fi
	done

	if [ ! -e ${BINFMT_MISC}/${BINFMT_NAME} ]; then
		echo ":${BINFMT_NAME}:${BINFMT_TYPE}:${BINFMT_OFFSET}:${BINFMT_MAGIC}:${BINFMT_MASK}:${BINFMT_INTERP}:" > ${BINFMT_MISC}/register
		if [ ! -e ${BINFMT_MISC}/${BINFMT_NAME} ]; then
			return 4
		fi
	fi

	logger -t "${BINFMT_NAME}" "Magic is now registered"

	return 0

}

binfmt_unregister() {

	if [ -e ${BINFMT_MISC}/${BINFMT_NAME} ]; then
		binfmt_check_file ${BINFMT_MISC}/${BINFMT_NAME}

		if [ $? -eq 153 ]; then
			echo -1 > ${BINFMT_MISC}/${BINFMT_NAME} 2> /dev/null
			if [ $? -ne 0 ]; then
				return 4
			fi
			logger -t "${BINFMT_NAME}" "Magic is now disabled"
		fi
	fi

	return 0
}


#---[ Start/Stop service ]--------------------------------------------------------------------------

case "$1" in
    start)

	binfmt_mount
	if [ "$?" == "0" ]; then
		binfmt_register
	fi

	echo -n "Starting ooRexx api "
	## Start daemon with startproc(8). If this fails
	## the return value is set appropriately by startproc.
	/sbin/startproc $RXAPI_BIN

	# Remember status and be verbose
	rc_status -v
	;;
    stop)

	binfmt_unregister

	echo -n "Shutting down ooRexx api "
	## Stop daemon with killproc(8) and if this fails
	## killproc sets the return value according to LSB.

	/sbin/killproc $RXAPI_BIN

	# Remember status and be verbose
	rc_status -v
	;;
    try-restart|condrestart)
	## Do a restart only if the service was active before.
	## Note: try-restart is now part of LSB (as of 1.9).
	## RH has a similar command named condrestart.
	if test "$1" = "condrestart"; then
		echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
	fi
	$0 status
	if test $? = 0; then
		$0 restart
	else
		rc_reset	# Not running is not a failure.
	fi
	# Remember status and be quiet
	rc_status
	;;

    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;

    force-reload)
	$0 try-restart
	rc_status
	;;

    reload)
	rc_failed 3
	rc_status -v
	;;

    status)
	echo -n "Checking for ooRexx api "
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Return value is slightly different for the status command:
	# 0 - service up and running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running (unused)
	# 4 - service status unknown :-(
	# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)
	
	# NOTE: checkproc returns LSB compliant status values.
	/sbin/checkproc $RXAPI_BIN
	# NOTE: rc_status knows that we called this init script with
	# "status" option and adapts its messages accordingly.
	rc_status -v
	;;

    probe)
	## Optional: Probe for the necessity of a reload, print out the
	## argument to this init script which is required for a reload.
	## Note: probe is not (yet) part of LSB (as of 1.9)

	test /var/run/rxapi.pid && echo reload
	;;

    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
	exit 1
	;;
esac
rc_exit
